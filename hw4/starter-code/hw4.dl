/************ data model **************/
.symbol_type PersonType
.symbol_type DescriptionType

.decl person(name:PersonType, description:DescriptionType)
.input person(filename="DATA/person.facts")

.decl female(name:PersonType)
.input female(filename="DATA/female.facts")

.decl male(name:PersonType)
.input male(filename="DATA/male.facts")

.decl parent_child(p1:PersonType, p2:PersonType)
.input parent_child(filename="DATA/parent_child.facts")

.decl person_living(p:PersonType)
.input person_living(filename="DATA/person_living.facts")

/************* problem 0 **************/
/**** Find all children of Priscilla ****/
.decl p0(x:PersonType, d:DescriptionType)
.output p0(filename="hw4-0.ans")

// NOTE: if you want to redirect the output to console
// you can use the syntax:
//.output p0(IO=stdout)
p0(x,d) :- parent_child("Priscilla",x), person(x,d).

// NOTE: DO NOT remove the declarations or the .output statements below.
// you can ignore any "No rules/facts defined for relation" warnings when you
// have not defined the rules for those relations
/************* problem 1 **************/
.decl p1(x:PersonType,d:DescriptionType)

p1(x,d) :- p0(x,d).
p1(x,d) :- parent_child(y,x), p1(y,_), person(x,d).

.output p1(filename="hw4-1.ans")
.output p1(IO=stdout)

/************* problem 2 **************/
.decl p2(x:PersonType, d:DescriptionType, m:number)

.decl m_count(x:PersonType, c:number)
.decl f_count(x:PersonType, c:number)
.decl m_max(m:number)
.decl f_max(m:number)

m_count(x,c) :- male(x), c = count : {parent_child(x,_)}.
f_count(x,c) :- female(x), c = count : {parent_child(x,_)}.
m_max(m) :- m = max c : {m_count(_,c)}.
f_max(m) :- m = max c : {f_count(_,c)}.
p2(x,d,m) :- m_max(m), m_count(x, m), person(x, d).
p2(x,d,m) :- f_max(m), f_count(x, m), person(x, d).

.output p2(filename="hw4-2.ans")
.output p2(IO=stdout)

/************* problem 3 **************/
.decl p3(x:PersonType, m1:number, m2:number)

.decl zero_gen(x:PersonType, g:number)
.decl gen(x:PersonType, g:number)

zero_gen(x,g) :- person(x,_), !parent_child(_,x), g=0.
gen(x,g) :- zero_gen(x,g).
gen(x,g) :- parent_child(y, x), gen(y,pg), person(x,_), g=pg+1.
p3(x,m1,m2) :- person_living(x), m1 = min g : {gen(x,g)},
  m2 = max g : {gen(x,g)}.

.output p3(filename="hw4-3.ans")
.output p3(IO=stdout)

/************* problem 4 **************/
.decl p4(x:PersonType)

.decl living_mom(x:PersonType, y:PersonType)
.decl mom_count(x:PersonType, c:number)
.decl living_count(c:number)

living_count(c) :- c = count : {person_living(_)}.
living_mom(x,y) :- person_living(x), parent_child(y,x), female(y).
living_mom(x,y) :- living_mom(x,z), parent_child(y,z), female(y).
mom_count(y, c) :- living_mom(_,y), c = count : {living_mom(_,y)}.
p4(x) :- mom_count(x, c), living_count(c).

.output p4(filename="hw4-4.ans")
.output p4(IO=stdout)

/************* problem 5 **************/
.decl p5(x:PersonType)

.decl mca_mom(x:PersonType, y:PersonType)

mca_mom(x,y) :- p4(x), parent_child(y, x), female(y).
mca_mom(x,y) :- mca_mom(x,z), parent_child(y,z), female(y).
p5(x) :- mca_mom(x,_), !mca_mom(_,x).

.output p5(filename="hw4-5.ans")
.output p5(IO=stdout)
